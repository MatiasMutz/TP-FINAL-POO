
Hicimos que la clase Circle extienda a Ellipse para aprovechar el comportamiento.
En el constructor llamamos al de Ellipse con radius*2 como mayor y minor axis.
En getRadius hicimos que devuelva getMayorAxis()/2.
Las variables de Ellipse las convertimos a private en vez de protected y utilizamos los getters
en los métodos de Circle.
También borramos el método repetidos de Circle getCenterPoint(que es igual que el de Ellipse).

Hicimos que la clase square extienda a Rectangle.
Utilizamos super en el constructor y elminamos los metodos redundantes (los getters)

En Point convertimos x,y en private y agregamos las clases de moveX y moveY para mover los puntos

En PaintPane, al realizar los cambios en Point dejaba de funcionar pues x,y ya no eran public,
entonces para mover los puntos, utilizamos los metodos moveX, moveY

En AppMenuBar cambiamos el metodo showAndWait. Ahora utilizamos primero aplicamos el metodo filter
para que en el caso de que la respuesta obtenida haya sido un OK, entonces que se ejecute el
Platform.exit para salir de la aplicacion.

En paintPane habia muchos if e instanceof para mover la figura, para solucionar esto, creamos los
metodos moveX y moveY en la interfaz figure y los implementamos en cada figura.
Aplicamos la misma idea para redrawCanvas creando un metodo redrawCanvas en Figure
Aplicamos lo mismo para figureBelongs creando un metodo figureBelongs en Figure


Agregamos clases para los botones, de ese modo, no tenemos que hacer tantos
 if else if porque usamos for each, ya que cada boton tiene su propio comportamiento, lo unico que
 hacemos es revisar cual es el seleccionado

 Agregamos diseño de PaintPane (slider, texto y colorSelectors.




 ERRORES:

 Cuando tienen que volver a dibujar, no deja bien el color